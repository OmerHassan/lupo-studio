package com.dehats.lupo.model
{
	import com.dehats.air.file.FileUtils;
	
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.FileListEvent;
	import flash.filesystem.File;
	
	import mx.collections.ArrayCollection;

		
	[Bindable]
	public class Project extends EventDispatcher
	{
		public static const ANALYSIS_DONE:String = "analysisDone";
		
		public var name:String;
		public var masterLanguage:String="en_US";		
		public var locale_directory:File;
		public var src_directory:File;
		public var targetLanguages:Array;// only used for translation projects
		
		public var languagesDirs:ArrayCollection = new ArrayCollection();
		public var bundleCollec:ArrayCollection = new ArrayCollection();
		
		private var languagesAnalyzed:int;// used to check if the analysis is done
		
		public function Project(pName:String, pMasterLanguage:String, pLocaleDirectory:File, pSourceDirectory:File):void
		{
			name = pName;
			masterLanguage = pMasterLanguage;
			src_directory = pSourceDirectory;
			locale_directory = pLocaleDirectory;
		}

		public function analyze():void
		{
			languagesDirs = new ArrayCollection();
			bundleCollec = new ArrayCollection();
			
			languagesAnalyzed = 0;
			
			locale_directory.addEventListener(FileListEvent.DIRECTORY_LISTING, onDirListingComplete);
			
			locale_directory.getDirectoryListingAsync();
						
		}
		
		private function onDirListingComplete(pEvt:FileListEvent):void
		{
			var contents:Array = pEvt.files;
			
			for (var i:uint = 0; i < contents.length; i++) 
			{
				var lgDir:File = contents[i];
				
				if( lgDir.isDirectory )
				{
					if( ! isValidLocaleName(lgDir.name)) continue;
					languagesDirs.addItem(lgDir);
					// Parse language folder to find properties files
					lgDir.addEventListener(FileListEvent.DIRECTORY_LISTING, onSubDirListingComplete);
					lgDir.getDirectoryListingAsync();					
				} 
				
			}			
			
			locale_directory.removeEventListener(FileListEvent.DIRECTORY_LISTING, onDirListingComplete);
		}
		
		public static function isValidLocaleName(pName:String):Boolean
		{
			// TODO find a better way to determine if it's a locale name
			return pName.charAt(0)!=".";
		}
		
		private function onSubDirListingComplete(pEvt:FileListEvent):void
		{
			var lgContents:Array = pEvt.files;
			
			for (var j:uint = 0; j < lgContents.length; j++) 
			{
				var f:File = lgContents[j];
				if( PropFile.isPropertyFile(f) ) 
				{
					var bundle:Bundle = getBundle(f.name, true);
					var language:String = f.parent.name; // TODO fin a better way to determine language
					var propFile:PropFile = new PropFile(f, language);
					bundle.propFileCollec.addItem(propFile);
					if(language==masterLanguage) bundle.masterPropFile = propFile;
				}
				
			}				
			
			
			pEvt.target.removeEventListener(FileListEvent.DIRECTORY_LISTING, onSubDirListingComplete);

			// check if the analysis process is over
			checkAnalysisIsDone();			
			
		}
		
		private function checkAnalysisIsDone():void
		{
			languagesAnalyzed++;
			if( languagesAnalyzed==languagesDirs.length) dispatchEvent(new Event(ANALYSIS_DONE));
		}

		public function getBundle(pBundleName:String, pCreateIfNotExists:Boolean=false):Bundle
		{
			var bundle:Bundle;
			
			for ( var i:int = 0 ; i < bundleCollec.length ; i++)
			{
				bundle = bundleCollec.getItemAt(i) as Bundle;
				if( bundle.name==pBundleName ) return bundle;
			}
			
			if( pCreateIfNotExists)
			{
				bundle = new Bundle(pBundleName);			
				bundleCollec.addItem(bundle);			
				return bundle;	
			}
			
			return null;
		}

		
		// returns a simple array of strings instead of the actual files
		[Bindable("analysisDone")]
		public function get languagesNames():Array
		{
			if( languagesDirs==null) return [];
			
			var list:Array = [];
			var n:int = languagesDirs.length;
			for ( var i:int=0 ; i < n ; i++)
			{
				var file:File = languagesDirs.getItemAt(i) as File;
				list.push( file.name);
			}			
			return list;
		}
		
		public function createNewLanguage(pLg:String, pCreateBundles:Boolean = true):Boolean
		{
			
			var localeDir:File = locale_directory;
			
			var lgDir:File = localeDir.resolvePath(pLg);
			
			if( lgDir.exists ) return false;
			else lgDir.createDirectory();
			
			
			if( ! pCreateBundles ) return true;
			
			// Create default file(s)
						
			for ( var i:int = 0 ; i < bundleCollec.length ; i++)
			{
				var bundle:Bundle = bundleCollec.getItemAt(i) as Bundle;
				var f:File = new File(locale_directory.nativePath+"/"+pLg+"/"+bundle.name);
				var defaultContent:String="#File generated by PropMgr"+File.lineEnding;
				defaultContent+="#Language "+ pLg;
				FileUtils.writeTextInFile(f, defaultContent);
			}		
			
			// Reset analyze since its structure has changed
			analyze();	
			
			return true;
		}
		
		public function createNewBundle(pName:String):void
		{
		
			if( getBundle(pName) != null ) return ;
		
			// create default file(s)
			
			for ( var i:int = 0 ; i < languagesDirs.length ; i++)
			{
				var lgDir:File = languagesDirs.getItemAt(i) as File;
				var f:File = new File(lgDir.nativePath+"/"+pName+".properties");
				var defaultContent:String="#File generated by PropMgr"+File.lineEnding;
				defaultContent+="#Language "+lgDir.name;
				FileUtils.writeTextInFile(f, defaultContent);
			}
			
			// Reset analyze since its structure has changed
			analyze();	

		}
		
		public function getHasChanged():Boolean
		{
			var n:int = bundleCollec.length
			for ( var i:int=0 ; i < n ; i++)
			{
				var bundle:Bundle = bundleCollec.getItemAt(i) as Bundle;
				if(bundle.getHasChanged()) return true;
			}		
			return false
		}		
		
		public function saveAllBundles():void
		{
			var n:int = bundleCollec.length
			for ( var i:int=0 ; i < n ; i++)
			{
				var bundle:Bundle = bundleCollec.getItemAt(i) as Bundle;
				bundle.saveAll();
			}		
		}		

 	}
}